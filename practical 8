PRACTICAL 8 
 
img = imread("PARROT.jpg") 
subplot(3,3,1); 
imshow(img); 
title("Original Image") ; 
 
filter = fspecial('gaussian'); 
imf = imfilter(img, filter); 
subplot(3,3,2); 
imshow(imf); 
title("Image after applying Gaussian"); 
 
filter2 = fspecial('sobel'); 
imf = imfilter(img, filter2); 
subplot(3,3,3); 
imshow(imf); 
title("Image after applying sobel"); 
 
filter3 = fspecial('prewitt'); 
imf = imfilter(img, filter3); 
subplot(3,3,4); 
imshow(imf); 
title("Image after applying Prewitt"); 
 
filter4 = fspecial('laplacian'); 
imf = imfilter(img, filter4); 
subplot(3,3,5); 
imshow(imf); 
title("Image after applying Laplacian"); 
 
filter5 = fspecial('average'); 
imf = imfilter(img, filter5); 
subplot(3,3,6); 
imshow(imf); 
title("Image after applying Average filter"); 
 
filter6 = fspecial('log'); 
imf = imfilter(img, filter6); 
subplot(3,3,7); 
imshow(imf); 
title("Image after applying Log filter"); 


=================================================================
% Define a simple 1-D signal and a kernel 

signal = [1, 2, 3, 4, 5]; 

kernel = [0.5, 0.5]; 

% Perform 1-D convolution manually 

convResult = conv(signal, kernel, 'valid'); % 'valid' to maintain output size 

disp('1-D Convolution Result:'); 

disp(convResult); 

% Read the input image 

inputImage = imread('B2.tif'); % Replace with actual file path 

% Convert the image to double for computations 

inputImage = im2double(inputImage); 

% Define the 3x3 low-pass filter mask 

lowPassFilter = ones(3) / 9; % Averaging filter (normalization by 9) 

% Apply the low-pass filter using convolution 

filteredLowPass = conv2(inputImage, lowPassFilter, 'same'); 

% Display the results 

figure; 

subplot(1, 2, 1); 

imshow(inputImage); 

title('Original Image'); 

subplot(1, 2, 2); 

imshow(filteredLowPass); 

title('Low-Pass Filtered Image'); 

% Read the input image 

inputImage = imread('B2.tif'); % Replace with actual file path 

% Define the 3x3 high-pass filter mask 

highPassFilter = [-1, -1, -1; -1, 8, -1; -1, -1, -1]; % Edge enhancement filter 

% Apply the high-pass filter using convolution 

filteredHighPass = conv2(double(inputImage), highPassFilter, 'same'); 

filteredHighPass = uint8(filteredHighPass); 

% Display the results 

figure; 

subplot(1, 2, 1); 

imshow(inputImage); 

title('Original Image'); 

subplot(1, 2, 2); 

imshow(filteredHighPass); 

title('High-Pass FilteredÂ Image');
